-------------------------------
EXPLICATION MINI-FRAMEWORK
-------------------------------


Arborescence :
-------------

    app/ : La configuration de notre application
    src/ : Le code PHP et HTML spécifique à notre projet
    vendor/ : Code général (coeur) de l'application 
    web/  : Repertoire web racine, point d'entrée de notre application (index.php, img/, photo/, Js/, fonts/). Les assets (ressources).

Nature des différents fichiers :
--------------------------------
app/
    Config/
        parameters.php : Contient touts les informations de connexion à la BDD... et autres paramètres

    config.php : Contient la class Config, dont l'objectif est de récupérer les paramètres et de les servir...



vendor/
    autoload.php : Ce fichier permet d'inclure (require) les bons fichiers lors des instanciations. Lorsqu'on va créer un objet, l'autoload va se charger d'inclure la classe nécessaire.

src/
    Entity/
        produit.php / Membre.php / Commande.php : Ces classes contiennet toutes les propriétés (private) de nos entités + les getters et les setters. Ce sont les plans de fabrication de nos entités. On les appelle des POPO (Plain Old PHP Object).

web/
    index.php : Clé d'entrée de notre application (app.php ou app_dev.php)

vendor/
    Manager/
        PDOManager : Cette classe représente la connexion à la BDD. Elle contient et nous retourne notre objet PDO, grâce auquel nous pourrons exécuter des requêtes SQL.
        Cette classe est un Sinlgeton. Cela signifie qu'on ne peut y avoir qu'un seul objet de cette classe.

    EntityRepository.php : Ce fichier centralise tout ce qui touche à la BDD. Les repositorys servent à effectuer des requêtes SQL. Ce fichier est le parent des repositorys,il gère la connexion à la BDD et les requêtes génériques.


src/
    Repository/
        ProduitRepository.php : Ce fichier contiendra toutes les fonctionnalités lié à l'entité produit, et "demandera" à EntityRepository de faire certaines requêtes. On ne donnera dans ce repository que des requêtes qui lui sont propres.


vendor/
    Controller/
        Controller.php : C'est le controlleur général de l'application. Il a deux mission :
            1) Récupérer la repository correspondant à l'entité dans laquelle nous sommes (getRepository)
            2) Afficher la vue correspondant à l'action en cours (render()).

src/
    Controller/
    ProduitController.php : cette classe hérite de controller général, et permet de déclencher toutes les actions liées à l'entité Produit

web/
    Copier et coller : photos (CSS/, JS/, font/, img/ etc...)
    

src/
    View/
        Produit/
            copier / coller depuis phpoo/12_mvc : boutique.php, fiche_produit.php
            ces deux fichiers correspondent aux vues des actions afficheall(), affiche(), categorie()
            Nous travaillons maintenant en Objet donc $produit['titre'] devient $produit -> getTitre()
            Plus tard ces fichiers auront l'extension .html (grâce à la méthode render())

        layout.html : Ce fichier constitue la structures des pages du site. Le template. En fonction des sites, il peut y avoir plusieurs layout (home, Conditions Générale de Vente, BackOffice...)


vendor/
    Manager/
        Application.php : cette class représente le lancement de notre application. Elle a pour mission, de scruter l'URL, et de lancer le bon controller, et la bonne méthode. 
        C'est notre "interrupteur".









